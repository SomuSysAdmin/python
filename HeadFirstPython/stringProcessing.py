"""
Each line in the sketch.txt file corresponds to a certain pattern:
Character: Dialog
         ^ --> Delimiter.

We can use this delimiter to split the contents of each line to obtain the character name or dialog separately.
"""
import os

os.chdir('/home/somu/Programming/python/HeadFirstPython')


# The following if suite is required only if the `IOError` Exception generated by the missing data file isn't handled.
"""
if not os.path.exists('sketch.txt'):    # Checks if a file called `sketch.txt` exists in the current directory.
    print("The data file sketch.txt doesn't exist! Exiting...")
    exit(1)
"""
try:
    data = open('sketch.txt')

    diaCount=0
    transcript=""
    for each_line in data:

        # The following `if` suite should only be used when not using exception handling. Else, this stays commented.
        """
        if each_line.find(':') == -1:     # Returns a -1 when it can't find a `:` in the string, otherwise the index of `:`.
            print("This line doesn't have a `:` - skipping split.")
            continue
        """

        lineArr = each_line.split(':')  # The split method returns a list comprised of the substrings, which we assign
                                        #   to lineArr.
        i = 0
        for each_word in lineArr:
            print("Arg[", i, "]= ", each_word," ", sep="", end="")
            i += 1

        # Multiple assignment
        try:
            """
            Create an immutable list, or a tuple. This is why it's enclosed in `()`s. The size and contents of such a 
                list is always fixed and cannot be changed, unlike lists created with `[]`s, i.e., mutable lists. The 
                left side of the expression is called the *target identifier*. 
            """
            (role, dialog) = each_line.split(":", 1)
        except ValueError:
            """
            Instead of continuing, if we wanted to simply _do nothing_ then we could write `pass` here, instead of 
            continue.
            """
            continue

        """
        Python makes it possible to assign the members of a list to multiple, individual variable using the above syntax 
            This is called multiple assignment. 
            
        We could use : `(role, dialog) = each_line.split(":")` however, since the data file contains multiple lines 
            where the subsequent ':'s after the first one aren't used as a delimiter, split would break the line into 
            more than two elements for the list, and try to assign them, but find only two variables. This would cause a
            ValueError - which indicates that there's something wrong with the data! This is an Exception/Runtime Error!
            
        To solve this, we use a `maxsplit` argument which is provided in the documentation for the split() BIF. Using 
            this sets a maximum number of splits possible for the function. We set it to one since only the first `:` 
            matters. 
            
        This leads to another value error, since there are multiple lines with just `(pause)` which don't conform to our 
            standard. We now have two choices: Added extra logic for the errors, or simply deal with errors if and when 
            they occur. If we choose the first, we can use the BIF find() for the string to determine if the line 
            contains a ':'. However, this method isn't future-proof, since the data format may change at any time, which
            will require the code to be re-written appropriately. Thus, error handling would be a better solution here. 
            
        In python, the try keyword remains the same, but `catch` is replaced with `except`, followed by an optional 
            exception name. Note, however, that ignoring the exception name can lead to silently ignoring unexpected
            errors and thus the wrong output.  
        """
        if role == "Man":
            diaCount += 1
            transcript = transcript + dialog    # String concatenation can be done with a + operator just like in Java.

    print("\n\nThe character 'Man' had", diaCount, "dialogues, which are:", transcript)
    data.close()
except IOError:
    print("The file `sketch.txt` wasn't found! ")